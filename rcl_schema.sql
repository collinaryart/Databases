-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2024-09-16 19:08:00 AEST
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c

set echo on
SPOOL rcl_schema_output.txt
-- Group: G186

DROP TABLE author CASCADE CONSTRAINTS;

DROP TABLE authorship CASCADE CONSTRAINTS;

DROP TABLE book CASCADE CONSTRAINTS;

DROP TABLE book_type CASCADE CONSTRAINTS;

DROP TABLE borrower CASCADE CONSTRAINTS;

DROP TABLE branch CASCADE CONSTRAINTS;

DROP TABLE class CASCADE CONSTRAINTS;

DROP TABLE copy CASCADE CONSTRAINTS;

DROP TABLE entry CASCADE CONSTRAINTS;

DROP TABLE entry_subject CASCADE CONSTRAINTS;

DROP TABLE fine CASCADE CONSTRAINTS;

DROP TABLE lga CASCADE CONSTRAINTS;

DROP TABLE loan CASCADE CONSTRAINTS;

DROP TABLE manager CASCADE CONSTRAINTS;

DROP TABLE publisher CASCADE CONSTRAINTS;

DROP TABLE reservatioh CASCADE CONSTRAINTS;

DROP TABLE subject CASCADE CONSTRAINTS;

-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE author (
    author_id    NUMBER(4) NOT NULL,
    author_fname VARCHAR2(30) NOT NULL,
    author_lname VARCHAR2(30) NOT NULL
);

COMMENT ON COLUMN author.author_id IS
    'This field serves as the unique identifier for an author, stored as a numeric value with a precision of 4 digits.';

COMMENT ON COLUMN author.author_fname IS
    'This field stores the first name of the author as a VARCHAR with a length of up to 30 characters, and it is a mandatory field.';

COMMENT ON COLUMN author.author_lname IS
    'This field stores the last name of the author as a VARCHAR with a length of up to 30 characters, and it is a mandatory field.';

ALTER TABLE author ADD CONSTRAINT authorship_pk PRIMARY KEY ( author_id );

CREATE TABLE authorship (
    author_id     NUMBER(4) NOT NULL,
    entry_call_no VARCHAR2(30) NOT NULL
);

COMMENT ON COLUMN authorship.author_id IS
    'This field serves as the unique identifier for an author, stored as a numeric value with a precision of 4 digits.';

COMMENT ON COLUMN authorship.entry_call_no IS
    'Unique call number for the entry';

ALTER TABLE authorship ADD CONSTRAINT authorship_pkv1 PRIMARY KEY ( author_id,
                                                                    entry_call_no );

CREATE TABLE book (
    book_isbn     CHAR(1) NOT NULL,
    type_id       NUMBER(2) NOT NULL,
    entry_call_no VARCHAR2(30) NOT NULL
);

COMMENT ON COLUMN book.book_isbn IS
    ' Unique ISBN number for the book';

COMMENT ON COLUMN book.type_id IS
    'Unique identifier for the type';

COMMENT ON COLUMN book.entry_call_no IS
    'Unique call number for the entry';

ALTER TABLE book ADD CONSTRAINT book_pk PRIMARY KEY ( book_isbn );

CREATE TABLE book_type (
    type_id   NUMBER(2) NOT NULL,
    type_name VARCHAR2(20) NOT NULL
);

COMMENT ON COLUMN book_type.type_id IS
    'Unique identifier for the type';

COMMENT ON COLUMN book_type.type_name IS
    'name for the type';

ALTER TABLE book_type ADD CONSTRAINT book_type_pk PRIMARY KEY ( type_id );

CREATE TABLE borrower (
    borrower_no             NUMBER(5) NOT NULL,
    borrower_fname          VARCHAR2(30) NOT NULL,
    borrower_lname          VARCHAR2(30) NOT NULL,
    borrower_postcode       NUMBER(4) NOT NULL,
    borrower_street_address VARCHAR2(50) NOT NULL,
    borrower_town           VARCHAR2(30) NOT NULL,
    borrower_state          CHAR(3) NOT NULL,
    branch_code             NUMBER(3) NOT NULL,
    borrower_status         CHAR(1) NOT NULL,
    class_id                NUMBER(1) NOT NULL,
    borrower_phone          CHAR(10)
);

ALTER TABLE borrower
    ADD CHECK ( borrower_status IN ( 'P ', 'B' ) );

COMMENT ON COLUMN borrower.borrower_no IS
    'Borrower identification number';

COMMENT ON COLUMN borrower.borrower_fname IS
    'borrower''s first name';

COMMENT ON COLUMN borrower.borrower_lname IS
    ' borrower''s last name.';

COMMENT ON COLUMN borrower.borrower_postcode IS
    ' borrower''s post code';

COMMENT ON COLUMN borrower.borrower_street_address IS
    ' borrower''s address';

COMMENT ON COLUMN borrower.borrower_town IS
    ' borrower''s town';

COMMENT ON COLUMN borrower.borrower_state IS
    ' borrower''s state';

COMMENT ON COLUMN borrower.branch_code IS
    'BRANCH code';

COMMENT ON COLUMN borrower.borrower_status IS
    'The borrower_status stores a mandatory single-character code representing the borrowers status.';

COMMENT ON COLUMN borrower.class_id IS
    'The class_id stores the unique identifier for a class as a numeric value, serving as the primary key.';

COMMENT ON COLUMN borrower.borrower_phone IS
    'The borrower_phone stores the borrower''s phone number as a string with a length of up to 10 characters.';

ALTER TABLE borrower ADD CONSTRAINT borrower_pk PRIMARY KEY ( borrower_no );

CREATE TABLE branch (
    branch_code    NUMBER(3) NOT NULL,
    branch_address VARCHAR2(100) NOT NULL,
    branch_phone   CHAR(10) NOT NULL,
    branch_name    VARCHAR2(30) NOT NULL,
    lga_code       NUMBER(5) NOT NULL,
    manager_id     NUMBER(3) NOT NULL
);

COMMENT ON COLUMN branch.branch_code IS
    'BRANCH code';

COMMENT ON COLUMN branch.branch_address IS
    'BRANCH address';

COMMENT ON COLUMN branch.branch_phone IS
    'BRANCH phone';

COMMENT ON COLUMN branch.branch_name IS
    'BRANCH name';

COMMENT ON COLUMN branch.lga_code IS
    'LGA code';

COMMENT ON COLUMN branch.manager_id IS
    'Manager identification number';

ALTER TABLE branch ADD CONSTRAINT branch_pk PRIMARY KEY ( branch_code );

CREATE TABLE class (
    class_id          NUMBER(1) NOT NULL,
    class_name        VARCHAR2(20) NOT NULL,
    class_loan_limit  NUMBER(2) NOT NULL,
    class_loan_period NUMBER(3) NOT NULL
);

COMMENT ON COLUMN class.class_id IS
    'The class_id stores the unique identifier for a class as a numeric value, serving as the primary key.';

COMMENT ON COLUMN class.class_name IS
    'The class_name stores the mandatory name of a class as a string with up to 20 characters.';

COMMENT ON COLUMN class.class_loan_limit IS
    'The class_loan_limit stores a mandatory numeric value representing the loan limit for a class.';

COMMENT ON COLUMN class.class_loan_period IS
    'The class_loan_period stores the loan period for a class as a numeric value.';

ALTER TABLE class ADD CONSTRAINT class_pk PRIMARY KEY ( class_id );

CREATE TABLE copy (
    branch_code NUMBER(3) NOT NULL,
    copy_id     NUMBER(5) NOT NULL,
    copy_price  NUMBER(6, 2) NOT NULL,
    copy_status CHAR(1) NOT NULL,
    book_isbn   CHAR(1) NOT NULL
);

ALTER TABLE copy
    ADD CHECK ( copy_status IN ( 'A', 'D', 'L', 'O', 'R',
                                 'S' ) );

COMMENT ON COLUMN copy.branch_code IS
    'BRANCH code';

COMMENT ON COLUMN copy.copy_id IS
    'Unique identifier for a copy of an item';

COMMENT ON COLUMN copy.copy_price IS
    'Price of the copy';

COMMENT ON COLUMN copy.copy_status IS
    'Indicates if a copy is reserved';

COMMENT ON COLUMN copy.book_isbn IS
    ' Unique ISBN number for the book';

ALTER TABLE copy ADD CONSTRAINT copy_pk PRIMARY KEY ( copy_id,
                                                      branch_code );

CREATE TABLE entry (
    entry_call_no        VARCHAR2(30) NOT NULL,
    entry_title          VARCHAR2(100) NOT NULL,
    entry_contents       VARCHAR2(1000) NOT NULL,
    entry_publish_year   NUMBER(4) NOT NULL,
    entry_classification VARCHAR2(1) NOT NULL,
    entry_page_count     NUMBER(4) NOT NULL,
    entry_difficulty     NUMBER(2),
    publisher_id         NUMBER(4) NOT NULL,
    entry_edition        VARCHAR2(50),
    entry_note           VARCHAR2(50),
    entry_language       VARCHAR2(20) NOT NULL
);

ALTER TABLE entry
    ADD CHECK ( entry_classification IN ( 'F', 'R' ) );

COMMENT ON COLUMN entry.entry_call_no IS
    'Unique call number for the entry';

COMMENT ON COLUMN entry.entry_title IS
    'Title of the entry';

COMMENT ON COLUMN entry.entry_contents IS
    'Contents of the entry';

COMMENT ON COLUMN entry.entry_publish_year IS
    'Year the entry was published';

COMMENT ON COLUMN entry.entry_classification IS
    'Classification of the entry with unknown data type';

COMMENT ON COLUMN entry.entry_page_count IS
    'Number of pages in the entry';

COMMENT ON COLUMN entry.entry_difficulty IS
    'Difficulty level of the entry';

COMMENT ON COLUMN entry.publisher_id IS
    'Represents the unique code for the publisher';

COMMENT ON COLUMN entry.entry_edition IS
    'The entry_edition stores the edition of an entry as a string with up to 50 characters.';

COMMENT ON COLUMN entry.entry_note IS
    'The entry_note stores additional notes for an entry as a string with up to 100 characters.';

COMMENT ON COLUMN entry.entry_language IS
    'The entry_language stores the language of the entry as a mandatory string with up to 20 characters.';

ALTER TABLE entry ADD CONSTRAINT entry_pk PRIMARY KEY ( entry_call_no );

CREATE TABLE entry_subject (
    entry_call_no VARCHAR2(30) NOT NULL,
    subject_id    NUMBER NOT NULL
);

COMMENT ON COLUMN entry_subject.entry_call_no IS
    'Unique call number for the entry';

COMMENT ON COLUMN entry_subject.subject_id IS
    'The subject_id stores the unique identifier for a subject as a numeric value with a precision of 4 digits and serves as the primary key.'
    ;

ALTER TABLE entry_subject ADD CONSTRAINT entry_subject_pk PRIMARY KEY ( entry_call_no,
                                                                        subject_id );

CREATE TABLE fine (
    fine_id      NUMBER(8) NOT NULL,
    fine_amount  NUMBER(5, 2) NOT NULL,
    fine_paydata DATE,
    loan_id      NUMBER(10) NOT NULL
);

COMMENT ON COLUMN fine.fine_id IS
    'The fine_id stores the unique identifier for a fine as a numeric value with a precision of 8 digits, serving as the primary key.'
    ;

COMMENT ON COLUMN fine.fine_amount IS
    'The fine_amount stores a mandatory numeric value representing a fine, with a precision of 5 digits and 2 decimal places.';

COMMENT ON COLUMN fine.loan_id IS
    'LOAN id';

ALTER TABLE fine ADD CONSTRAINT fine_pk PRIMARY KEY ( fine_id );

ALTER TABLE fine ADD CONSTRAINT fine_nk UNIQUE ( loan_id );

CREATE TABLE lga (
    lga_code         NUMBER(5) NOT NULL,
    lga_name         VARCHAR2(50) NOT NULL,
    lga_size         NUMBER(7) NOT NULL,
    lga_contact_name VARCHAR2(50) NOT NULL
);

COMMENT ON COLUMN lga.lga_code IS
    'LGA code';

COMMENT ON COLUMN lga.lga_name IS
    'LGA name';

COMMENT ON COLUMN lga.lga_size IS
    'LGA size';

COMMENT ON COLUMN lga.lga_contact_name IS
    'LGA Contact name';

ALTER TABLE lga ADD CONSTRAINT lga_pk PRIMARY KEY ( lga_code );

CREATE TABLE loan (
    loan_id              NUMBER(10) NOT NULL,
    borrower_no          NUMBER(5) NOT NULL,
    loan_taken_datetime  DATE NOT NULL,
    loan_due_date        DATE NOT NULL,
    loan_return_datetime DATE,
    branch_code          NUMBER(3) NOT NULL,
    copy_id              NUMBER(5) NOT NULL
);

COMMENT ON COLUMN loan.loan_id IS
    'LOAN id';

COMMENT ON COLUMN loan.borrower_no IS
    'Borrower identification number';

COMMENT ON COLUMN loan.loan_taken_datetime IS
    'Date and time when the loan was taken';

COMMENT ON COLUMN loan.loan_due_date IS
    'The due date of the loan';

COMMENT ON COLUMN loan.loan_return_datetime IS
    'The date and time when the loan was returned';

COMMENT ON COLUMN loan.branch_code IS
    'BRANCH code';

COMMENT ON COLUMN loan.copy_id IS
    'Unique identifier for a copy of an item';

ALTER TABLE loan ADD CONSTRAINT loan_pk PRIMARY KEY ( loan_id );

ALTER TABLE loan
    ADD CONSTRAINT loan_ck UNIQUE ( branch_code,
                                    loan_taken_datetime,
                                    copy_id );

ALTER TABLE loan ADD CONSTRAINT loan_nk UNIQUE ( borrower_no,
                                                 loan_taken_datetime );

CREATE TABLE manager (
    manager_id    NUMBER(3) NOT NULL,
    manager_fname VARCHAR2(30),
    manager_lname VARCHAR2(30),
    manager_phone CHAR(10),
    branch_code   NUMBER(3) NOT NULL
);

COMMENT ON COLUMN manager.manager_id IS
    'Manager identification number';

COMMENT ON COLUMN manager.manager_fname IS
    'Manager first name';

COMMENT ON COLUMN manager.manager_lname IS
    'Manager last name';

COMMENT ON COLUMN manager.manager_phone IS
    'Manager phone number';

COMMENT ON COLUMN manager.branch_code IS
    'BRANCH code';

CREATE UNIQUE INDEX manager__idx ON
    manager (
        branch_code
    ASC );

ALTER TABLE manager ADD CONSTRAINT manager_pk PRIMARY KEY ( manager_id );

CREATE TABLE publisher (
    publisher_id   NUMBER(4) NOT NULL,
    publisher_name VARCHAR2(50) NOT NULL
);

COMMENT ON COLUMN publisher.publisher_id IS
    'Represents the unique code for the publisher';

COMMENT ON COLUMN publisher.publisher_name IS
    'Stores the name of the publisher, limited to 50 characters, and is a required field.';

ALTER TABLE publisher ADD CONSTRAINT publisher_pk PRIMARY KEY ( publisher_id );

CREATE TABLE reservatioh (
    reservation_datetime DATE NOT NULL,
    borrower_no          NUMBER(5) NOT NULL,
    copy_id              NUMBER(5) NOT NULL,
    branch_code          NUMBER(3) NOT NULL
);

COMMENT ON COLUMN reservatioh.reservation_datetime IS
    'The reservation_datetime stores the unique date and time of a reservation and serves as the primary key.';

COMMENT ON COLUMN reservatioh.borrower_no IS
    'Borrower identification number';

COMMENT ON COLUMN reservatioh.copy_id IS
    'Unique identifier for a copy of an item';

COMMENT ON COLUMN reservatioh.branch_code IS
    'BRANCH code';

ALTER TABLE reservatioh ADD CONSTRAINT reservatioh_pk PRIMARY KEY ( reservation_datetime,
                                                                    borrower_no );

CREATE TABLE subject (
    subject_id   NUMBER NOT NULL,
    subject_desc VARCHAR2(50) NOT NULL
);

COMMENT ON COLUMN subject.subject_id IS
    'The subject_id stores the unique identifier for a subject as a numeric value with a precision of 4 digits and serves as the primary key.'
    ;

COMMENT ON COLUMN subject.subject_desc IS
    'The subject_desc stores a mandatory description of the subject as a string with up to 50 characters.';

ALTER TABLE subject ADD CONSTRAINT subject_pk PRIMARY KEY ( subject_id );

ALTER TABLE authorship
    ADD CONSTRAINT author_authorship FOREIGN KEY ( author_id )
        REFERENCES author ( author_id );

ALTER TABLE copy
    ADD CONSTRAINT book_copy_fk FOREIGN KEY ( book_isbn )
        REFERENCES book ( book_isbn );

ALTER TABLE borrower
    ADD CONSTRAINT borrower_branch_fk FOREIGN KEY ( branch_code )
        REFERENCES branch ( branch_code );

ALTER TABLE loan
    ADD CONSTRAINT borrower_loan_fk FOREIGN KEY ( borrower_no )
        REFERENCES borrower ( borrower_no );

ALTER TABLE reservatioh
    ADD CONSTRAINT borrower_reservation_fk FOREIGN KEY ( borrower_no )
        REFERENCES borrower ( borrower_no );

ALTER TABLE copy
    ADD CONSTRAINT branch_copy_fk FOREIGN KEY ( branch_code )
        REFERENCES branch ( branch_code );

ALTER TABLE branch
    ADD CONSTRAINT branch_lga_fk FOREIGN KEY ( lga_code )
        REFERENCES lga ( lga_code );

ALTER TABLE manager
    ADD CONSTRAINT branch_manager_fk FOREIGN KEY ( branch_code )
        REFERENCES branch ( branch_code );

ALTER TABLE book
    ADD CONSTRAINT bt_book_fk FOREIGN KEY ( type_id )
        REFERENCES book_type ( type_id );

ALTER TABLE borrower
    ADD CONSTRAINT class_borrower_fk FOREIGN KEY ( class_id )
        REFERENCES class ( class_id );

ALTER TABLE loan
    ADD CONSTRAINT copy_loan_fk FOREIGN KEY ( copy_id,
                                              branch_code )
        REFERENCES copy ( copy_id,
                          branch_code );

ALTER TABLE reservatioh
    ADD CONSTRAINT copy_reservation FOREIGN KEY ( copy_id,
                                                  branch_code )
        REFERENCES copy ( copy_id,
                          branch_code );

ALTER TABLE authorship
    ADD CONSTRAINT entry_authorship FOREIGN KEY ( entry_call_no )
        REFERENCES entry ( entry_call_no );

ALTER TABLE book
    ADD CONSTRAINT entry_book_fk FOREIGN KEY ( entry_call_no )
        REFERENCES entry ( entry_call_no );

ALTER TABLE entry_subject
    ADD CONSTRAINT entry_es_fk FOREIGN KEY ( entry_call_no )
        REFERENCES entry ( entry_call_no );

ALTER TABLE fine
    ADD CONSTRAINT loan_fine_fk FOREIGN KEY ( loan_id )
        REFERENCES loan ( loan_id );

ALTER TABLE branch
    ADD CONSTRAINT manager_branch_fk FOREIGN KEY ( manager_id )
        REFERENCES manager ( manager_id );

ALTER TABLE entry
    ADD CONSTRAINT publisher_entry_fk FOREIGN KEY ( publisher_id )
        REFERENCES publisher ( publisher_id );

ALTER TABLE entry_subject
    ADD CONSTRAINT subject_es_fk FOREIGN KEY ( subject_id )
        REFERENCES subject ( subject_id );



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            17
-- CREATE INDEX                             1
-- ALTER TABLE                             42
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0

SPOOL off
set echo off