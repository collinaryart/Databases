SQL> -- Group: G186
SQL> DROP TABLE author CASCADE CONSTRAINTS;

DROP TABLE author CASCADE CONSTRAINTS
           *
ERROR at line 10:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE authorship CASCADE CONSTRAINTS;

DROP TABLE authorship CASCADE CONSTRAINTS
           *
ERROR at line 12:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE book CASCADE CONSTRAINTS;

DROP TABLE book CASCADE CONSTRAINTS
           *
ERROR at line 14:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE book_type CASCADE CONSTRAINTS;

DROP TABLE book_type CASCADE CONSTRAINTS
           *
ERROR at line 16:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE borrower CASCADE CONSTRAINTS;

DROP TABLE borrower CASCADE CONSTRAINTS
           *
ERROR at line 18:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE branch CASCADE CONSTRAINTS;

DROP TABLE branch CASCADE CONSTRAINTS
           *
ERROR at line 20:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE class CASCADE CONSTRAINTS;

DROP TABLE class CASCADE CONSTRAINTS
           *
ERROR at line 22:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE copy CASCADE CONSTRAINTS;

DROP TABLE copy CASCADE CONSTRAINTS
           *
ERROR at line 24:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE entry CASCADE CONSTRAINTS;

DROP TABLE entry CASCADE CONSTRAINTS
           *
ERROR at line 26:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE entry_subject CASCADE CONSTRAINTS;

DROP TABLE entry_subject CASCADE CONSTRAINTS
           *
ERROR at line 28:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE fine CASCADE CONSTRAINTS;

DROP TABLE fine CASCADE CONSTRAINTS
           *
ERROR at line 30:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE lga CASCADE CONSTRAINTS;

DROP TABLE lga CASCADE CONSTRAINTS
           *
ERROR at line 32:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE loan CASCADE CONSTRAINTS;

DROP TABLE loan CASCADE CONSTRAINTS
           *
ERROR at line 34:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE manager CASCADE CONSTRAINTS;

DROP TABLE manager CASCADE CONSTRAINTS
           *
ERROR at line 36:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE publisher CASCADE CONSTRAINTS;

DROP TABLE publisher CASCADE CONSTRAINTS
           *
ERROR at line 38:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE reservatioh CASCADE CONSTRAINTS;

DROP TABLE reservatioh CASCADE CONSTRAINTS
           *
ERROR at line 40:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> DROP TABLE subject CASCADE CONSTRAINTS;

DROP TABLE subject CASCADE CONSTRAINTS
           *
ERROR at line 42:
ORA-00942: table or view does not exist
https://docs.oracle.com/error-help/db/ora-00942/
SQL> -- predefined type, no DDL - MDSYS.SDO_GEOMETRY
SQL> -- predefined type, no DDL - XMLTYPE
SQL> CREATE TABLE author (
  2      author_id    NUMBER(4) NOT NULL,
  3      author_fname VARCHAR2(30) NOT NULL,
  4      author_lname VARCHAR2(30) NOT NULL
  5  );

TABLE created.

SQL> COMMENT ON COLUMN author.author_id IS
  2      'This field serves as the unique identifier for an author, stored as a numeric value with a precision of 4 digits.';
Comment created.

SQL> COMMENT ON COLUMN author.author_fname IS
  2      'This field stores the first name of the author as a VARCHAR with a length of up to 30 characters, and it is a mandatory field.';
Comment created.

SQL> COMMENT ON COLUMN author.author_lname IS
  2      'This field stores the last name of the author as a VARCHAR with a length of up to 30 characters, and it is a mandatory field.';
Comment created.

SQL> ALTER TABLE author ADD CONSTRAINT authorship_pk PRIMARY KEY ( author_id );

TABLE altered.

SQL> CREATE TABLE authorship (
  2      author_id     NUMBER(4) NOT NULL,
  3      entry_call_no VARCHAR2(30) NOT NULL
  4  );

TABLE created.

SQL> COMMENT ON COLUMN authorship.author_id IS
  2      'This field serves as the unique identifier for an author, stored as a numeric value with a precision of 4 digits.';
Comment created.

SQL> COMMENT ON COLUMN authorship.entry_call_no IS
  2      'Unique call number for the entry';
Comment created.

SQL> ALTER TABLE authorship ADD CONSTRAINT authorship_pkv1 PRIMARY KEY ( author_id,
  2                                                                      entry_call_no );

TABLE altered.

SQL> CREATE TABLE book (
  2      book_isbn     CHAR(1) NOT NULL,
  3      type_id       NUMBER(2) NOT NULL,
  4      entry_call_no VARCHAR2(30) NOT NULL
  5  );

TABLE created.

SQL> COMMENT ON COLUMN book.book_isbn IS
  2      ' Unique ISBN number for the book';
Comment created.

SQL> COMMENT ON COLUMN book.type_id IS
  2      'Unique identifier for the type';
Comment created.

SQL> COMMENT ON COLUMN book.entry_call_no IS
  2      'Unique call number for the entry';
Comment created.

SQL> ALTER TABLE book ADD CONSTRAINT book_pk PRIMARY KEY ( book_isbn );

TABLE altered.

SQL> CREATE TABLE book_type (
  2      type_id   NUMBER(2) NOT NULL,
  3      type_name VARCHAR2(20) NOT NULL
  4  );

TABLE created.

SQL> COMMENT ON COLUMN book_type.type_id IS
  2      'Unique identifier for the type';
Comment created.

SQL> COMMENT ON COLUMN book_type.type_name IS
  2      'name for the type';
Comment created.

SQL> ALTER TABLE book_type ADD CONSTRAINT book_type_pk PRIMARY KEY ( type_id );

TABLE altered.

SQL> CREATE TABLE borrower (
  2      borrower_no             NUMBER(5) NOT NULL,
  3      borrower_fname          VARCHAR2(30) NOT NULL,
  4      borrower_lname          VARCHAR2(30) NOT NULL,
  5      borrower_postcode       NUMBER(4) NOT NULL,
  6      borrower_street_address VARCHAR2(50) NOT NULL,
  7      borrower_town           VARCHAR2(30) NOT NULL,
  8      borrower_state          CHAR(3) NOT NULL,
  9      branch_code             NUMBER(3) NOT NULL,
  10      borrower_status         CHAR(1) NOT NULL,
  11      class_id                NUMBER(1) NOT NULL,
  12      borrower_phone          CHAR(10)
  13  );

TABLE created.

SQL> ALTER TABLE borrower
  2      ADD CHECK ( borrower_status IN ( 'P ', 'B' ) );

TABLE altered.

SQL> COMMENT ON COLUMN borrower.borrower_no IS
  2      'Borrower identification number';
Comment created.

SQL> COMMENT ON COLUMN borrower.borrower_fname IS
  2      'borrower''s first name';
Comment created.

SQL> COMMENT ON COLUMN borrower.borrower_lname IS
  2      ' borrower''s last name.';
Comment created.

SQL> COMMENT ON COLUMN borrower.borrower_postcode IS
  2      ' borrower''s post code';
Comment created.

SQL> COMMENT ON COLUMN borrower.borrower_street_address IS
  2      ' borrower''s address';
Comment created.

SQL> COMMENT ON COLUMN borrower.borrower_town IS
  2      ' borrower''s town';
Comment created.

SQL> COMMENT ON COLUMN borrower.borrower_state IS
  2      ' borrower''s state';
Comment created.

SQL> COMMENT ON COLUMN borrower.branch_code IS
  2      'BRANCH code';
Comment created.

SQL> COMMENT ON COLUMN borrower.borrower_status IS
  2      'The borrower_status stores a mandatory single-character code representing the borrowers status.';
Comment created.

SQL> COMMENT ON COLUMN borrower.class_id IS
  2      'The class_id stores the unique identifier for a class as a numeric value, serving as the primary key.';
Comment created.

SQL> COMMENT ON COLUMN borrower.borrower_phone IS
  2      'The borrower_phone stores the borrower''s phone number as a string with a length of up to 10 characters.';
Comment created.

SQL> ALTER TABLE borrower ADD CONSTRAINT borrower_pk PRIMARY KEY ( borrower_no );

TABLE altered.

SQL> CREATE TABLE branch (
  2      branch_code    NUMBER(3) NOT NULL,
  3      branch_address VARCHAR2(100) NOT NULL,
  4      branch_phone   CHAR(10) NOT NULL,
  5      branch_name    VARCHAR2(30) NOT NULL,
  6      lga_code       NUMBER(5) NOT NULL,
  7      manager_id     NUMBER(3) NOT NULL
  8  );

TABLE created.

SQL> COMMENT ON COLUMN branch.branch_code IS
  2      'BRANCH code';
Comment created.

SQL> COMMENT ON COLUMN branch.branch_address IS
  2      'BRANCH address';
Comment created.

SQL> COMMENT ON COLUMN branch.branch_phone IS
  2      'BRANCH phone';
Comment created.

SQL> COMMENT ON COLUMN branch.branch_name IS
  2      'BRANCH name';
Comment created.

SQL> COMMENT ON COLUMN branch.lga_code IS
  2      'LGA code';
Comment created.

SQL> COMMENT ON COLUMN branch.manager_id IS
  2      'Manager identification number';
Comment created.

SQL> ALTER TABLE branch ADD CONSTRAINT branch_pk PRIMARY KEY ( branch_code );

TABLE altered.

SQL> CREATE TABLE class (
  2      class_id          NUMBER(1) NOT NULL,
  3      class_name        VARCHAR2(20) NOT NULL,
  4      class_loan_limit  NUMBER(2) NOT NULL,
  5      class_loan_period NUMBER(3) NOT NULL
  6  );

TABLE created.

SQL> COMMENT ON COLUMN class.class_id IS
  2      'The class_id stores the unique identifier for a class as a numeric value, serving as the primary key.';
Comment created.

SQL> COMMENT ON COLUMN class.class_name IS
  2      'The class_name stores the mandatory name of a class as a string with up to 20 characters.';
Comment created.

SQL> COMMENT ON COLUMN class.class_loan_limit IS
  2      'The class_loan_limit stores a mandatory numeric value representing the loan limit for a class.';
Comment created.

SQL> COMMENT ON COLUMN class.class_loan_period IS
  2      'The class_loan_period stores the loan period for a class as a numeric value.';
Comment created.

SQL> ALTER TABLE class ADD CONSTRAINT class_pk PRIMARY KEY ( class_id );

TABLE altered.

SQL> CREATE TABLE copy (
  2      branch_code NUMBER(3) NOT NULL,
  3      copy_id     NUMBER(5) NOT NULL,
  4      copy_price  NUMBER(6, 2) NOT NULL,
  5      copy_status CHAR(1) NOT NULL,
  6      book_isbn   CHAR(1) NOT NULL
  7  );

TABLE created.

SQL> ALTER TABLE copy
  2      ADD CHECK ( copy_status IN ( 'A', 'D', 'L', 'O', 'R',
  3                                   'S' ) );

TABLE altered.

SQL> COMMENT ON COLUMN copy.branch_code IS
  2      'BRANCH code';
Comment created.

SQL> COMMENT ON COLUMN copy.copy_id IS
  2      'Unique identifier for a copy of an item';
Comment created.

SQL> COMMENT ON COLUMN copy.copy_price IS
  2      'Price of the copy';
Comment created.

SQL> COMMENT ON COLUMN copy.copy_status IS
  2      'Indicates if a copy is reserved';
Comment created.

SQL> COMMENT ON COLUMN copy.book_isbn IS
  2      ' Unique ISBN number for the book';
Comment created.

SQL> ALTER TABLE copy ADD CONSTRAINT copy_pk PRIMARY KEY ( copy_id,
  2                                                        branch_code );

TABLE altered.

SQL> CREATE TABLE entry (
  2      entry_call_no        VARCHAR2(30) NOT NULL,
  3      entry_title          VARCHAR2(100) NOT NULL,
  4      entry_contents       VARCHAR2(1000) NOT NULL,
  5      entry_publish_year   NUMBER(4) NOT NULL,
  6      entry_classification VARCHAR2(1) NOT NULL,
  7      entry_page_count     NUMBER(4) NOT NULL,
  8      entry_difficulty     NUMBER(2),
  9      publisher_id         NUMBER(4) NOT NULL,
  10      entry_edition        VARCHAR2(50),
  11      entry_note           VARCHAR2(50),
  12      entry_language       VARCHAR2(20) NOT NULL
  13  );

TABLE created.

SQL> ALTER TABLE entry
  2      ADD CHECK ( entry_classification IN ( 'F', 'R' ) );

TABLE altered.

SQL> COMMENT ON COLUMN entry.entry_call_no IS
  2      'Unique call number for the entry';
Comment created.

SQL> COMMENT ON COLUMN entry.entry_title IS
  2      'Title of the entry';
Comment created.

SQL> COMMENT ON COLUMN entry.entry_contents IS
  2      'Contents of the entry';
Comment created.

SQL> COMMENT ON COLUMN entry.entry_publish_year IS
  2      'Year the entry was published';
Comment created.

SQL> COMMENT ON COLUMN entry.entry_classification IS
  2      'Classification of the entry with unknown data type';
Comment created.

SQL> COMMENT ON COLUMN entry.entry_page_count IS
  2      'Number of pages in the entry';
Comment created.

SQL> COMMENT ON COLUMN entry.entry_difficulty IS
  2      'Difficulty level of the entry';
Comment created.

SQL> COMMENT ON COLUMN entry.publisher_id IS
  2      'Represents the unique code for the publisher';
Comment created.

SQL> COMMENT ON COLUMN entry.entry_edition IS
  2      'The entry_edition stores the edition of an entry as a string with up to 50 characters.';
Comment created.

SQL> COMMENT ON COLUMN entry.entry_note IS
  2      'The entry_note stores additional notes for an entry as a string with up to 100 characters.';
Comment created.

SQL> COMMENT ON COLUMN entry.entry_language IS
  2      'The entry_language stores the language of the entry as a mandatory string with up to 20 characters.';
Comment created.

SQL> ALTER TABLE entry ADD CONSTRAINT entry_pk PRIMARY KEY ( entry_call_no );

TABLE altered.

SQL> CREATE TABLE entry_subject (
  2      entry_call_no VARCHAR2(30) NOT NULL,
  3      subject_id    NUMBER NOT NULL
  4  );

TABLE created.

SQL> COMMENT ON COLUMN entry_subject.entry_call_no IS
  2      'Unique call number for the entry';
Comment created.

SQL> COMMENT ON COLUMN entry_subject.subject_id IS
  2      'The subject_id stores the unique identifier for a subject as a numeric value with a precision of 4 digits and serves as the primary key.'
  3       ;
Comment created.

SQL> ALTER TABLE entry_subject ADD CONSTRAINT entry_subject_pk PRIMARY KEY ( entry_call_no,
  2                                                                          subject_id );

TABLE altered.

SQL> CREATE TABLE fine (
  2      fine_id      NUMBER(8) NOT NULL,
  3      fine_amount  NUMBER(5, 2) NOT NULL,
  4      fine_paydata DATE,
  5      loan_id      NUMBER(10) NOT NULL
  6  );

TABLE created.

SQL> COMMENT ON COLUMN fine.fine_id IS
  2      'The fine_id stores the unique identifier for a fine as a numeric value with a precision of 8 digits, serving as the primary key.'
  3       ;
Comment created.

SQL> COMMENT ON COLUMN fine.fine_amount IS
  2      'The fine_amount stores a mandatory numeric value representing a fine, with a precision of 5 digits and 2 decimal places.';
Comment created.

SQL> COMMENT ON COLUMN fine.loan_id IS
  2      'LOAN id';
Comment created.

SQL> ALTER TABLE fine ADD CONSTRAINT fine_pk PRIMARY KEY ( fine_id );

TABLE altered.

SQL> ALTER TABLE fine ADD CONSTRAINT fine_nk UNIQUE ( loan_id );

TABLE altered.

SQL> CREATE TABLE lga (
  2      lga_code         NUMBER(5) NOT NULL,
  3      lga_name         VARCHAR2(50) NOT NULL,
  4      lga_size         NUMBER(7) NOT NULL,
  5      lga_contact_name VARCHAR2(50) NOT NULL
  6  );

TABLE created.

SQL> COMMENT ON COLUMN lga.lga_code IS
  2      'LGA code';
Comment created.

SQL> COMMENT ON COLUMN lga.lga_name IS
  2      'LGA name';
Comment created.

SQL> COMMENT ON COLUMN lga.lga_size IS
  2      'LGA size';
Comment created.

SQL> COMMENT ON COLUMN lga.lga_contact_name IS
  2      'LGA Contact name';
Comment created.

SQL> ALTER TABLE lga ADD CONSTRAINT lga_pk PRIMARY KEY ( lga_code );

TABLE altered.

SQL> CREATE TABLE loan (
  2      loan_id              NUMBER(10) NOT NULL,
  3      borrower_no          NUMBER(5) NOT NULL,
  4      loan_taken_datetime  DATE NOT NULL,
  5      loan_due_date        DATE NOT NULL,
  6      loan_return_datetime DATE,
  7      branch_code          NUMBER(3) NOT NULL,
  8      copy_id              NUMBER(5) NOT NULL
  9  );

TABLE created.

SQL> COMMENT ON COLUMN loan.loan_id IS
  2      'LOAN id';
Comment created.

SQL> COMMENT ON COLUMN loan.borrower_no IS
  2      'Borrower identification number';
Comment created.

SQL> COMMENT ON COLUMN loan.loan_taken_datetime IS
  2      'Date and time when the loan was taken';
Comment created.

SQL> COMMENT ON COLUMN loan.loan_due_date IS
  2      'The due date of the loan';
Comment created.

SQL> COMMENT ON COLUMN loan.loan_return_datetime IS
  2      'The date and time when the loan was returned';
Comment created.

SQL> COMMENT ON COLUMN loan.branch_code IS
  2      'BRANCH code';
Comment created.

SQL> COMMENT ON COLUMN loan.copy_id IS
  2      'Unique identifier for a copy of an item';
Comment created.

SQL> ALTER TABLE loan ADD CONSTRAINT loan_pk PRIMARY KEY ( loan_id );

TABLE altered.

SQL> ALTER TABLE loan
  2      ADD CONSTRAINT loan_ck UNIQUE ( branch_code,
  3                                      loan_taken_datetime,
  4                                      copy_id );

TABLE altered.

SQL> ALTER TABLE loan ADD CONSTRAINT loan_nk UNIQUE ( borrower_no,
  2                                                   loan_taken_datetime );

TABLE altered.

SQL> CREATE TABLE manager (
  2      manager_id    NUMBER(3) NOT NULL,
  3      manager_fname VARCHAR2(30),
  4      manager_lname VARCHAR2(30),
  5      manager_phone CHAR(10),
  6      branch_code   NUMBER(3) NOT NULL
  7  );

TABLE created.

SQL> COMMENT ON COLUMN manager.manager_id IS
  2      'Manager identification number';
Comment created.

SQL> COMMENT ON COLUMN manager.manager_fname IS
  2      'Manager first name';
Comment created.

SQL> COMMENT ON COLUMN manager.manager_lname IS
  2      'Manager last name';
Comment created.

SQL> COMMENT ON COLUMN manager.manager_phone IS
  2      'Manager phone number';
Comment created.

SQL> COMMENT ON COLUMN manager.branch_code IS
  2      'BRANCH code';
Comment created.

SQL> CREATE UNIQUE INDEX manager__idx ON
  2      manager (
  3          branch_code
  4      ASC );

INDEX created.

SQL> ALTER TABLE manager ADD CONSTRAINT manager_pk PRIMARY KEY ( manager_id );

TABLE altered.

SQL> CREATE TABLE publisher (
  2      publisher_id   NUMBER(4) NOT NULL,
  3      publisher_name VARCHAR2(50) NOT NULL
  4  );

TABLE created.

SQL> COMMENT ON COLUMN publisher.publisher_id IS
  2      'Represents the unique code for the publisher';
Comment created.

SQL> COMMENT ON COLUMN publisher.publisher_name IS
  2      'Stores the name of the publisher, limited to 50 characters, and is a required field.';
Comment created.

SQL> ALTER TABLE publisher ADD CONSTRAINT publisher_pk PRIMARY KEY ( publisher_id );

TABLE altered.

SQL> CREATE TABLE reservatioh (
  2      reservation_datetime DATE NOT NULL,
  3      borrower_no          NUMBER(5) NOT NULL,
  4      copy_id              NUMBER(5) NOT NULL,
  5      branch_code          NUMBER(3) NOT NULL
  6  );

TABLE created.

SQL> COMMENT ON COLUMN reservatioh.reservation_datetime IS
  2      'The reservation_datetime stores the unique date and time of a reservation and serves as the primary key.';
Comment created.

SQL> COMMENT ON COLUMN reservatioh.borrower_no IS
  2      'Borrower identification number';
Comment created.

SQL> COMMENT ON COLUMN reservatioh.copy_id IS
  2      'Unique identifier for a copy of an item';
Comment created.

SQL> COMMENT ON COLUMN reservatioh.branch_code IS
  2      'BRANCH code';
Comment created.

SQL> ALTER TABLE reservatioh ADD CONSTRAINT reservatioh_pk PRIMARY KEY ( reservation_datetime,
  2                                                                      borrower_no );

TABLE altered.

SQL> CREATE TABLE subject (
  2      subject_id   NUMBER NOT NULL,
  3      subject_desc VARCHAR2(50) NOT NULL
  4  );

TABLE created.

SQL> COMMENT ON COLUMN subject.subject_id IS
  2      'The subject_id stores the unique identifier for a subject as a numeric value with a precision of 4 digits and serves as the primary key.'
  3       ;
Comment created.

SQL> COMMENT ON COLUMN subject.subject_desc IS
  2      'The subject_desc stores a mandatory description of the subject as a string with up to 50 characters.';
Comment created.

SQL> ALTER TABLE subject ADD CONSTRAINT subject_pk PRIMARY KEY ( subject_id );

TABLE altered.

SQL> ALTER TABLE authorship
  2      ADD CONSTRAINT author_authorship FOREIGN KEY ( author_id )
  3          REFERENCES author ( author_id );

TABLE altered.

SQL> ALTER TABLE copy
  2      ADD CONSTRAINT book_copy_fk FOREIGN KEY ( book_isbn )
  3          REFERENCES book ( book_isbn );

TABLE altered.

SQL> ALTER TABLE borrower
  2      ADD CONSTRAINT borrower_branch_fk FOREIGN KEY ( branch_code )
  3          REFERENCES branch ( branch_code );

TABLE altered.

SQL> ALTER TABLE loan
  2      ADD CONSTRAINT borrower_loan_fk FOREIGN KEY ( borrower_no )
  3          REFERENCES borrower ( borrower_no );

TABLE altered.

SQL> ALTER TABLE reservatioh
  2      ADD CONSTRAINT borrower_reservation_fk FOREIGN KEY ( borrower_no )
  3          REFERENCES borrower ( borrower_no );

TABLE altered.

SQL> ALTER TABLE copy
  2      ADD CONSTRAINT branch_copy_fk FOREIGN KEY ( branch_code )
  3          REFERENCES branch ( branch_code );

TABLE altered.

SQL> ALTER TABLE branch
  2      ADD CONSTRAINT branch_lga_fk FOREIGN KEY ( lga_code )
  3          REFERENCES lga ( lga_code );

TABLE altered.

SQL> ALTER TABLE manager
  2      ADD CONSTRAINT branch_manager_fk FOREIGN KEY ( branch_code )
  3          REFERENCES branch ( branch_code );

TABLE altered.

SQL> ALTER TABLE book
  2      ADD CONSTRAINT bt_book_fk FOREIGN KEY ( type_id )
  3          REFERENCES book_type ( type_id );

TABLE altered.

SQL> ALTER TABLE borrower
  2      ADD CONSTRAINT class_borrower_fk FOREIGN KEY ( class_id )
  3          REFERENCES class ( class_id );

TABLE altered.

SQL> ALTER TABLE loan
  2      ADD CONSTRAINT copy_loan_fk FOREIGN KEY ( copy_id,
  3                                                branch_code )
  4          REFERENCES copy ( copy_id,
  5                            branch_code );

TABLE altered.

SQL> ALTER TABLE reservatioh
  2      ADD CONSTRAINT copy_reservation FOREIGN KEY ( copy_id,
  3                                                    branch_code )
  4          REFERENCES copy ( copy_id,
  5                            branch_code );

TABLE altered.

SQL> ALTER TABLE authorship
  2      ADD CONSTRAINT entry_authorship FOREIGN KEY ( entry_call_no )
  3          REFERENCES entry ( entry_call_no );

TABLE altered.

SQL> ALTER TABLE book
  2      ADD CONSTRAINT entry_book_fk FOREIGN KEY ( entry_call_no )
  3          REFERENCES entry ( entry_call_no );

TABLE altered.

SQL> ALTER TABLE entry_subject
  2      ADD CONSTRAINT entry_es_fk FOREIGN KEY ( entry_call_no )
  3          REFERENCES entry ( entry_call_no );

TABLE altered.

SQL> ALTER TABLE fine
  2      ADD CONSTRAINT loan_fine_fk FOREIGN KEY ( loan_id )
  3          REFERENCES loan ( loan_id );

TABLE altered.

SQL> ALTER TABLE branch
  2      ADD CONSTRAINT manager_branch_fk FOREIGN KEY ( manager_id )
  3          REFERENCES manager ( manager_id );

TABLE altered.

SQL> ALTER TABLE entry
  2      ADD CONSTRAINT publisher_entry_fk FOREIGN KEY ( publisher_id )
  3          REFERENCES publisher ( publisher_id );

TABLE altered.

SQL> ALTER TABLE entry_subject
  2      ADD CONSTRAINT subject_es_fk FOREIGN KEY ( subject_id )
  3          REFERENCES subject ( subject_id );

TABLE altered.

SQL> -- Oracle SQL Developer Data Modeler Summary Report: 
SQL> -- 
SQL> -- CREATE TABLE                            17
SQL> -- CREATE INDEX                             1
SQL> -- ALTER TABLE                             42
SQL> -- CREATE VIEW                              0
SQL> -- ALTER VIEW                               0
SQL> -- CREATE PACKAGE                           0
SQL> -- CREATE PACKAGE BODY                      0
SQL> -- CREATE PROCEDURE                         0
SQL> -- CREATE FUNCTION                          0
SQL> -- CREATE TRIGGER                           0
SQL> -- ALTER TRIGGER                            0
SQL> -- CREATE COLLECTION TYPE                   0
SQL> -- CREATE STRUCTURED TYPE                   0
SQL> -- CREATE STRUCTURED TYPE BODY              0
SQL> -- CREATE CLUSTER                           0
SQL> -- CREATE CONTEXT                           0
SQL> -- CREATE DATABASE                          0
SQL> -- CREATE DIMENSION                         0
SQL> -- CREATE DIRECTORY                         0
SQL> -- CREATE DISK GROUP                        0
SQL> -- CREATE ROLE                              0
SQL> -- CREATE ROLLBACK SEGMENT                  0
SQL> -- CREATE SEQUENCE                          0
SQL> -- CREATE MATERIALIZED VIEW                 0
SQL> -- CREATE MATERIALIZED VIEW LOG             0
SQL> -- CREATE SYNONYM                           0
SQL> -- CREATE TABLESPACE                        0
SQL> -- CREATE USER                              0
SQL> -- 
SQL> -- DROP TABLESPACE                          0
SQL> -- DROP DATABASE                            0
SQL> -- 
SQL> -- REDACTION POLICY                         0
SQL> -- TSDP POLICY                              0
SQL> -- 
SQL> -- ORDS DROP SCHEMA                         0
SQL> -- ORDS ENABLE SCHEMA                       0
SQL> -- ORDS ENABLE OBJECT                       0
SQL> -- 
SQL> -- ERRORS                                   0
SQL> -- WARNINGS                                 0
SQL> SPOOL off

